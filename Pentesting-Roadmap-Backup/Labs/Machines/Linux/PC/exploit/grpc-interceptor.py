#!/usr/bin/python3

import grpc
import reflection_pb2
import reflection_pb2_grpc
from google.protobuf import descriptor_pb


server_address = '10.129.39.159'
server_port = 50051


# Create a channel to the server
channel = grpc.insecure_channel(f'{server_address}:{server_port}')


# Create a stub for the server reflection service
reflection_stub = grpc.reflection.v1alpha.reflection_pb2_grpc.ServerReflectionStub(channel)




def list_services():
    # Create a request to list available services using server reflection
    request = grpc.reflection.v1alpha.reflection_pb2.ServerReflectionRequest()
    request.list_services = ''

    # Call the ServerReflectionInfo RPC
    response_iterator = reflection_stub.ServerReflectionInfo(iter([request]))

    # Iterate over the response to extract the list of services
    for response in response_iterator:
        for service in response.list_services_response.service:
            print(service.name)


list_services()

# def perform_register_user(username, password):
#     # Create a request message
#     request = RegisterUserRequest()
#     request.username = username
#     request.password = password

#     # Make gRPC request to the server
#     response = stub.RegisterUser(request)
    
    
