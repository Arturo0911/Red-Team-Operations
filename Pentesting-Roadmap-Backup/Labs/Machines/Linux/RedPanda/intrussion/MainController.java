import java.util.ArrayList;
import java.io.IOException;
import java.sql.*;
import java.util.List;
import java.util.ArrayList;
import java.io.File;
import java.io.InputStream;
import java.io.FileInputStream;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.http.MediaType;

import org.apache.commons.io.IOUtils;

import org.jdom2.JDOMException;
import org.jdom2.input.SAXBuilder;
import org.jdom2.output.Format;
import org.jdom2.output.XMLOutputter;
import org.jdom2.*;

@Controller
public class MainController {
  @GetMapping(&quot;/stats&quot;)
  	public ModelAndView stats(@RequestParam(name=&quot;author&quot;,required=false) String author, Model model) throws JDOMException, IOException{
		SAXBuilder saxBuilder = new SAXBuilder();
		if(author == null)
		author = &quot;N/A&quot;;
		author = author.strip();
		System.out.println(&#39;&quot;&#39; + author + &#39;&quot;&#39;);
		if(author.equals(&quot;woodenk&quot;) || author.equals(&quot;damian&quot;))
		{
			String path = &quot;/credits/&quot; + author + &quot;_creds.xml&quot;;
			File fd = new File(path);
			Document doc = saxBuilder.build(fd);
			Element rootElement = doc.getRootElement();
			String totalviews = rootElement.getChildText(&quot;totalviews&quot;);
		       	List&lt;Element&gt; images = rootElement.getChildren(&quot;image&quot;);
			for(Element image: images)
				System.out.println(image.getChildText(&quot;uri&quot;));
			model.addAttribute(&quot;noAuthor&quot;, false);
			model.addAttribute(&quot;author&quot;, author);
			model.addAttribute(&quot;totalviews&quot;, totalviews);
			model.addAttribute(&quot;images&quot;, images);
			return new ModelAndView(&quot;stats.html&quot;);
		}
		else
		{
			model.addAttribute(&quot;noAuthor&quot;, true);
			return new ModelAndView(&quot;stats.html&quot;);
		}
	}
  @GetMapping(value=&quot;/export.xml&quot;, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public @ResponseBody byte[] exportXML(@RequestParam(name=&quot;author&quot;, defaultValue=&quot;err&quot;) String author) throws IOException {

		System.out.println(&quot;Exporting xml of: &quot; + author);
		if(author.equals(&quot;woodenk&quot;) || author.equals(&quot;damian&quot;))
		{
			InputStream in = new FileInputStream(&quot;/credits/&quot; + author + &quot;_creds.xml&quot;);
			System.out.println(in);
			return IOUtils.toByteArray(in);
		}
		else
		{
			return IOUtils.toByteArray(&quot;Error, incorrect paramenter &#39;author&#39;\n\r&quot;);
		}
	}
  @PostMapping(&quot;/search&quot;)
	public ModelAndView search(@RequestParam(&quot;name&quot;) String name, Model model) {
	if(name.isEmpty())
	{
		name = &quot;Greg&quot;;
	}
        String query = filter(name);
	ArrayList pandas = searchPanda(query);
        System.out.println(&quot;\n\&quot;&quot;+query+&quot;\&quot;\n&quot;);
        model.addAttribute(&quot;query&quot;, query);
	model.addAttribute(&quot;pandas&quot;, pandas);
	model.addAttribute(&quot;n&quot;, pandas.size());
	return new ModelAndView(&quot;search.html&quot;);
	}
  public String filter(String arg) {
        String[] no_no_words = {&quot;%&quot;, &quot;_&quot;,&quot;$&quot;, &quot;~&quot;, };
        for (String word : no_no_words) {
            if(arg.contains(word)){
                return &quot;Error occured: banned characters&quot;;
            }
        }
        return arg;
    }
    public ArrayList searchPanda(String query) {

        Connection conn = null;
        PreparedStatement stmt = null;
        ArrayList&lt;ArrayList&gt; pandas = new ArrayList();
        try {
            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
            conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/red_panda&quot;, &quot;woodenk&quot;, &quot;RedPandazRule&quot;);
            stmt = conn.prepareStatement(&quot;SELECT name, bio, imgloc, author FROM pandas WHERE name LIKE ?&quot;);
            stmt.setString(1, &quot;%&quot; + query + &quot;%&quot;);
            ResultSet rs = stmt.executeQuery();
            while(rs.next()){
                ArrayList&lt;String&gt; panda = new ArrayList&lt;String&gt;();
                panda.add(rs.getString(&quot;name&quot;));
                panda.add(rs.getString(&quot;bio&quot;));
                panda.add(rs.getString(&quot;imgloc&quot;));
		panda.add(rs.getString(&quot;author&quot;));
                pandas.add(panda);
            }
        }catch(Exception e){ System.out.println(e);}
          return pandas;
    }
}
