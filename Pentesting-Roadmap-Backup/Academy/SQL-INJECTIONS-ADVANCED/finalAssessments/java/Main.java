import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.util.Base64;

public class SecretKeyCalculator {
    public static void main(String[] args) {
        String username = "bmdyy";
        String secretKey = calculateSecretKey(username);
        System.out.println("Secret Key: " + secretKey);
    }

    private static String calculateSecretKey(String username) {
        try {
            // Simulating database query, replace with your actual user retrieval logic
            String email = "bmdyy@pass2.htb";
            String password = "$2a$12$cL8f8M6VTPILtTStdqmLrunDy4JW/FbNYVpfJnLO2XoZGs/c7E2I";

            // Create a temporary string by combining email, constant, and password
            String tmp = email + "$4lty" + password;

            // Calculate SHA-256 hash
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] encodedHash = digest.digest(tmp.getBytes(StandardCharsets.UTF_8));

            // Encode the hash in Base64 (URL-safe)
            String base64Encoded = Base64.getUrlEncoder().encodeToString(encodedHash).replaceAll("-|_", "X");
            // Format the Base64 string into a secret key
            String secretKey = String.format("%s-%s-%s-%s",
                    base64Encoded.substring(0, 4),
                    base64Encoded.substring(4, 8),
                    base64Encoded.substring(8, 12),
                    base64Encoded.substring(12, 16));

            return secretKey;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            System.exit(1);
            return null;
        }
    }
}
