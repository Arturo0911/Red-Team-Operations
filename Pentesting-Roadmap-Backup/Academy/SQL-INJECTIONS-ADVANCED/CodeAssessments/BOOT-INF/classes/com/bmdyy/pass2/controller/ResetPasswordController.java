package com.bmdyy.pass2.controller;

import com.bmdyy.pass2.model.User;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.util.Base64;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.security.crypto.bcrypt.BCrypt;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class ResetPasswordController {
   @Autowired
   JdbcTemplate jdbcTemplate;
   private static final Logger logger = LoggerFactory.getLogger(ResetPasswordController.class);

   private String calculateSecretKey(String username) {
      try {
         String sql = "SELECT * FROM users WHERE username = ?";
         User user = (User)this.jdbcTemplate.queryForObject(sql, new Object[]{username}, new BeanPropertyRowMapper(User.class));
         String var10000 = user.getEmail();
         String tmp = var10000 + "$4lty" + user.getPassword();
         MessageDigest digest = MessageDigest.getInstance("SHA-256");
         byte[] encodedHash = digest.digest(tmp.getBytes(StandardCharsets.UTF_8));
         String b64 = Base64.getUrlEncoder().encodeToString(encodedHash).replaceAll("-|_", "X");
         String secretKey = String.format("%s-%s-%s-%s", b64.substring(0, 4), b64.substring(4, 8), b64.substring(8, 12), b64.substring(12, 16));
         return secretKey;
      } catch (Exception var9) {
         return null;
      }
   }

   @GetMapping({"/reset-password"})
   public String GET_Reset_Password(@RequestParam(required = false) String e, Model model) {
      model.addAttribute("e", e);
      return "reset-password";
   }

   @PostMapping({"/reset-password"})
   public void POST_Reset_Password(@RequestParam String username, @RequestParam String resetKey, @RequestParam String password, @RequestParam String repeatPassword, HttpServletResponse response) throws IOException {
      String calculatedResetKey = this.calculateSecretKey(username);
      logger.info("Calculated Secret Key: {}", calculatedResetKey);
      if (calculatedResetKey == null) {
         response.sendRedirect("/reset-password?e=Invalid+Username");
      } else if (!resetKey.equals(calculatedResetKey)) {
         response.sendRedirect("/reset-password?e=Invalid+Secret+Key");
      } else if (!password.equals(repeatPassword)) {
         response.sendRedirect("/reset-password?e=Passwords+don't+match");
      } else {
         String passwordHash = BCrypt.hashpw(password, BCrypt.gensalt(12));
         String sql = "UPDATE users SET password = ? WHERE username = ?";
         this.jdbcTemplate.update(sql, new Object[]{passwordHash, username});
         response.sendRedirect("/login?e=Password+was+reset");
      }
   }
}
