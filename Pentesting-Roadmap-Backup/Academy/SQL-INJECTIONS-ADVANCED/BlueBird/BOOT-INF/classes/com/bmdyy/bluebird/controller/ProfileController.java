package com.bmdyy.bluebird.controller;

import com.bmdyy.bluebird.model.User;
import com.bmdyy.bluebird.security.services.UserDetailsImpl;
import com.bmdyy.bluebird.security.services.UserDetailsServiceImpl;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCrypt;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class ProfileController {
   @Autowired
   JdbcTemplate jdbcTemplate;
   @Autowired
   UserDetailsServiceImpl userDetailsService;

   @GetMapping({"/profile/{id}"})
   public String profile(@PathVariable int id, Model model, HttpServletResponse response) throws IOException {
      String sql;
      User user;
      try {
         sql = "SELECT username, name, description, email, id FROM users WHERE id = ?";
         user = (User)this.jdbcTemplate.queryForObject(sql, new Object[]{id}, new BeanPropertyRowMapper(User.class));
      } catch (Exception var8) {
         response.sendRedirect("/");
         return null;
      }

      sql = "SELECT text, to_char(posted_at, 'dd.mm.yyyy, hh:mi') as posted_at_nice, username, name, author_id FROM posts JOIN users ON posts.author_id = users.id WHERE email = '" + user.getEmail() + "' ORDER BY posted_at DESC";
      List posts = this.jdbcTemplate.queryForList(sql);
      model.addAttribute("user", user);
      model.addAttribute("posts", posts);
      UserDetailsImpl userDetails = (UserDetailsImpl)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
      model.addAttribute("userDetails", userDetails);
      return "profile";
   }

   @GetMapping({"/profile/edit"})
   public String editProfile(@RequestParam(required = false) String e, Model model) {
      UserDetailsImpl userDetails = (UserDetailsImpl)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
      model.addAttribute("userDetails", userDetails);
      model.addAttribute("e", e);
      return "edit-profile";
   }

   @PostMapping({"/profile/edit"})
   public void editProfilePOST(@RequestParam String name, @RequestParam String description, @RequestParam String email, @RequestParam(required = false) String password, @RequestParam(required = false) String repeatPassword, HttpServletResponse response) throws IOException {
      UserDetailsImpl userDetails = (UserDetailsImpl)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
      if (name.length() <= 50 && description.length() <= 100 && email.length() <= 100) {
         if (name.isEmpty()) {
            response.sendRedirect("/profile/edit?e=Name+can't+be+empty");
         } else {
            String sql;
            try {
               sql = "SELECT * FROM users WHERE email = ? AND id <> ?";
               User user = (User)this.jdbcTemplate.queryForObject(sql, new Object[]{email, userDetails.getId()}, new BeanPropertyRowMapper(User.class));
               response.sendRedirect("/profile/edit?e=This+email+address+is+already+taken");
            } catch (Exception var11) {
               sql = "UPDATE users SET name = ?, description = ?, email = ?";
               boolean passwordFlag = false;
               if (password != null && repeatPassword != null) {
                  if (!password.equals(repeatPassword)) {
                     response.sendRedirect("/profile/edit?e=Passwords+don't+match");
                     return;
                  }

                  passwordFlag = true;
                  sql = sql + ", password = ?";
               }

               sql = sql + " WHERE id = ?";
               if (passwordFlag) {
                  String passwordHash = BCrypt.hashpw(password, BCrypt.gensalt(12));
                  this.jdbcTemplate.update(sql, new Object[]{name, description, email, passwordHash, userDetails.getId()});
               } else {
                  this.jdbcTemplate.update(sql, new Object[]{name, description, email, userDetails.getId()});
               }

               response.sendRedirect("/profile/edit?e=Details+updated!");
            }
         }
      } else {
         response.sendRedirect("/profile/edit?e=Some+values+are+too+long");
      }
   }
}
