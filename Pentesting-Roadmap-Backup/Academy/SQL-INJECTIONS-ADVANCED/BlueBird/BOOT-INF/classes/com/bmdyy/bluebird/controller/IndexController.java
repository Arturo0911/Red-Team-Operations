package com.bmdyy.bluebird.controller;

import com.bmdyy.bluebird.model.User;
import com.bmdyy.bluebird.security.services.UserDetailsImpl;
import com.bmdyy.bluebird.security.services.UserDetailsServiceImpl;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.BadSqlGrammarException;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class IndexController {
   @Autowired
   JdbcTemplate jdbcTemplate;
   @Autowired
   UserDetailsServiceImpl userDetailsService;

   @GetMapping({"/"})
   public String index(@RequestParam(required = false) String q, Model model) {
      String sql;
      if (q != null) {
         sql = "SELECT text, to_char(posted_at, 'dd.mm.yyyy, hh:mi') as posted_at_nice, username, name, author_id FROM posts JOIN users ON posts.author_id = users.id WHERE text LIKE '%" + q + "%' ORDER BY posted_at DESC";
      } else {
         sql = "SELECT text, to_char(posted_at, 'dd.mm.yyyy, hh:mi') as posted_at_nice, username, name, author_id FROM posts JOIN users ON posts.author_id = users.id ORDER BY posted_at DESC";
      }

      List posts = this.jdbcTemplate.queryForList(sql);
      model.addAttribute("posts", posts);
      Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
      if (authentication.getName().equals("anonymousUser")) {
         return "home-logged-out";
      } else {
         UserDetailsImpl userDetails = (UserDetailsImpl)authentication.getPrincipal();
         model.addAttribute("userDetails", userDetails);
         return "home-logged-in";
      }
   }

   @GetMapping({"/find-user"})
   public String findUser(@RequestParam String u, Model model, HttpServletResponse response) throws IOException {
      Pattern p = Pattern.compile("'|(.*'.*'.*)");
      Matcher m = p.matcher(u);
      String u2 = u.toLowerCase();
      if (!u2.contains(" ") && !m.matches()) {
         try {
            String sql = "SELECT * FROM users WHERE username LIKE '%" + u + "%'";
            List users = this.jdbcTemplate.query(sql, new BeanPropertyRowMapper(User.class));
            UserDetailsImpl userDetails = (UserDetailsImpl)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
            model.addAttribute("userDetails", userDetails);
            model.addAttribute("users", users);
            return "find-user";
         } catch (BadSqlGrammarException var10) {
            System.out.println(var10.getSQLException().getMessage());
            model.addAttribute("errorMsg", "Invalid search query");
            return "error";
         } catch (Exception var11) {
            var11.printStackTrace();
            model.addAttribute("errorMsg", "Invalid search query");
            return "error";
         }
      } else {
         model.addAttribute("errorMsg", "Illegal search term");
         return "error";
      }
   }
}
