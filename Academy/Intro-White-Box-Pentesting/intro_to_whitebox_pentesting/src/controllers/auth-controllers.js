const jwt = require("jsonwebtoken");

const JWT_ACCESS_SECRET = "randompassword";

function validateEmail(email) {
  return String(email)
    .toLowerCase()
    .match(
      /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
    );
}

async function getUserToken(req, res, next) {
  const { email } = req.body;

  // verify email
  if (!email) {
    return next({
      message: "Please provide an email address.",
      statusCode: 400,
    });
  } else if (!validateEmail(email)) {
    return next({
      message: "Please provide a valid email address.",
      statusCode: 403,
    });
  }

  let accessToken;

  try {
    accessToken = jwt.sign(
      {
        email,
        role: email.includes("@hackthebox.com") ? "admin" : "user",
      },
      JWT_ACCESS_SECRET,
      {
        expiresIn: "1d",
      }
    );
  } catch (err) {
    return next({
      message: "Could not authenticate user, please try again.",
      statusCode: 500,
    });
  }

  if (accessToken) {
    res.json({
      token: accessToken,
    });
  }
}

// used to add user details to request object for verification purposes on protected routes
function verifyToken(req, res, next) {
  const authHeader = req.headers.authorization;
  const token = authHeader && authHeader.split(" ")[1];

  if (!token) {
    return next({
      message: "Unauthorized",
      statusCode: 403,
    });
  }

  jwt.verify(token, JWT_ACCESS_SECRET, (err, user) => {
    if (err) {
      return next({
        message: "Unauthorized",
        statusCode: 403,
      });
    }

    if (user) {
      req.user = {
        email: user.email,
        role: user.role,
      };
    }

    next();
  });
}

module.exports = {
  getUserToken,
  verifyToken,
};
